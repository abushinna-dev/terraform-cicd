name: 'Terraform CI/CD for GCP'

on:
  # Trigger on pushes to the main branch (e.g., after a PR is merged)
  push:
    branches:
      - 'main'

  # Trigger on pull requests targeting the main branch
  pull_request:
    branches:
      - 'main'

  # Allow manual runs from the GitHub UI
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action (apply or destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest

    # Permissions for Workload Identity Federation and for posting PR comments
    permissions:
      contents: 'read'
      pull-requests: 'write'
      id-token: 'write'

    env:
      # Set this for all steps. Use DEBUG for troubleshooting.
      TF_LOG: INFO

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Debug OIDC Token Claims'
        uses: actions/github-script@v7
        with:
          script: |
            const token = await core.getIDToken();
            const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());
            console.log("---- OIDC Token Claims ----");
            console.log(JSON.stringify(payload, null, 2));
            console.log("---------------------------");

      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          # Workload Identity Federation provider details
          workload_identity_provider: 'projects/1055950436923/locations/global/workloadIdentityPools/tmam-practical-id/providers/github-actions'
          service_account: '1055950436923-compute@developer.gserviceaccount.com'

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: 'Terraform Init'
        run: |
          terraform init \
            -backend-config="bucket=tmam-practical-state-bucket" \
            -backend-config="prefix=env/prod"

      - name: 'Terraform Validate'
        run: terraform validate

      - name: 'Terraform Plan'
        id: plan
        run: |
          # Create the plan. Non-sensitive vars are loaded from .auto.tfvars files.
          # The SSH_PUB_KEY secret is passed in securely.
          terraform plan \
            -no-color \
            -out=tfplan \
            -var="ssh_pub_key=${{ secrets.SSH_PUB_KEY }}"

      - name: 'Post Terraform Plan to PR'
        # This step only runs on pull request events
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            // Convert the binary plan to a text format
            const planOutput = require('child_process').execSync('terraform show -no-color tfplan').toString();
            
            if (planOutput.trim() === '') {
              console.log('Plan is empty. Skipping comment.');
              return;
            }

            const body = `
            ###  Terraform Plan

            <details><summary>Click to expand</summary>

            \`\`\`hcl
            ${planOutput}
            \`\`\`

            </details>
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body.substring(0, 65535) // Max comment size is 65536 bytes
            });

      - name: 'Terraform Apply'
        # Run apply only on pushes to main or manual 'apply' dispatch
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: terraform apply -auto-approve tfplan

      - name: 'Terraform Destroy'
        # Run destroy only on manual 'destroy' dispatch
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve -var="ssh_pub_key=${{ secrets.SSH_PUB_KEY }}"
